'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _util = require('./util');

function EventDispatcher(target) {
  this._listeners = {};
  this._eventTarget = target || {};
  this.recoverLists = [];
}
EventDispatcher.prototype = {
  addEventListener: function addEventListener(type, callback) {
    var types = type.split('.');
    var _type = types[0];
    var namespaces = types[1];
    var list = this._listeners[_type];
    var index = 0;
    var listener = void 0;
    var i = void 0;
    if (!list) {
      this._listeners[_type] = list = [];
    }
    i = list.length;

    while (--i > -1) {
      listener = list[i];
      if (listener.n === namespaces && listener.c === callback) {
        list.splice(i, 1);
      } else if (index === 0) {
        index = i + 1;
      }
    }
    var func = this.dispatchEvent.bind(this, _type);
    list.splice(index, 0, { c: callback, n: namespaces, t: _type, func: func });
    if (this._eventTarget.addEventListener) {
      this._eventTarget.addEventListener(_type, func, false);
    } else if (this._eventTarget.attachEvent) {
      this._eventTarget.attachEvent('on' + _type, func);
    }
  },
  removeEventListener: function removeEventListener(type, callback, force) {
    var types = type.split('.');
    var _type = types[0];
    var namespaces = types[1];
    var list = this._listeners[_type];
    var i = void 0;
    var _force = force;
    if (!namespaces) {
      _force = true;
    }
    if (list) {
      i = list.length;
      while (--i > -1) {
        if (list[i].c === callback && (_force || list[i].n === namespaces)) {
          if (this._eventTarget.removeEventListener) {
            this._eventTarget.removeEventListener(list[i].t, list[i].func);
          } else if (this._eventTarget.detachEvent) {
            this._eventTarget.detachEvent('on' + list[i].t, list[i].func);
          }
          list.splice(i, 1);
          if (!_force) {
            return;
          }
        }
      }
    }
  },
  dispatchEvent: function dispatchEvent(type, e) {
    var list = this._listeners[type];
    var i = void 0;
    var t = void 0;
    var listener = void 0;
    if (list) {
      i = list.length;
      t = this._eventTarget;
      while (--i > -1) {
        listener = list[i];
        if (listener) {
          var _e = e || { type: type, target: t };
          listener.c.call(t, _e);
        }
      }
    }
  },
  removeAllType: function removeAllType(type) {
    var _this = this;

    var types = type.split('.');
    var _type = types[0];
    var namespaces = types[1];
    var list = this._listeners[_type];
    this.recoverLists = this.recoverLists.concat((0, _util.dataToArray)(list).filter(function (item) {
      return item.n && item.n.match(namespaces);
    }));
    this.recoverLists.forEach(function (item) {
      _this.removeEventListener(item.t + '.' + item.n, item.c);
    });
  },
  reAllType: function reAllType(type) {
    var _this2 = this;

    var types = type.split('.');
    var _type = types[0];
    var namespaces = types[1];
    this.recoverLists = this.recoverLists.map(function (item) {
      if (item.t === _type && item.n.match(namespaces)) {
        _this2.addEventListener(item.t + '.' + item.n, item.c);
        return null;
      }
      return item;
    }).filter(function (item) {
      return item;
    });
  }
};
var event = void 0;
if (typeof window !== 'undefined' && typeof document !== 'undefined') {
  event = new EventDispatcher(window);
} else {
  event = new EventDispatcher();
}
exports["default"] = event;
module.exports = exports['default'];