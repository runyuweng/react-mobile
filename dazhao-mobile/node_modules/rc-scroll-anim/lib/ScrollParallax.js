'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _EventDispatcher = require('./EventDispatcher');

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _tweenFunctions = require('tween-functions');

var _tweenFunctions2 = _interopRequireDefault(_tweenFunctions);

var _TimeLine = require('rc-tween-one/lib/TimeLine');

var _TimeLine2 = _interopRequireDefault(_TimeLine);

var _ticker = require('rc-tween-one/lib/ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var tickerId = 0;

function noop() {}

function playScaleToArray(playScale) {
  if (Array.isArray(playScale)) {
    if (playScale.length === 2) {
      return playScale;
    }
    return [playScale[0] || 0, playScale[1] || 1];
  } else if (playScale) {
    return [playScale, 1];
  }
  return [0, 1];
}

var ScrollParallax = function (_React$Component) {
  _inherits(ScrollParallax, _React$Component);

  function ScrollParallax(props) {
    _classCallCheck(this, ScrollParallax);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.setDefaultData = function (_vars) {
      var vars = (0, _util.dataToArray)(_vars);
      var varsForIn = function varsForIn(item, i) {
        var playScale = playScaleToArray(item.playScale).map(function (data) {
          return data * _this.clientHeight;
        });
        var aItem = _extends({}, item);
        delete aItem.playScale;
        var cItem = _extends({}, item);
        delete cItem.playScale;
        cItem.delay = aItem.delay = playScale[0];
        cItem.duration = aItem.duration = playScale[1] - playScale[0];
        cItem.onStart = null;
        cItem.onUpdate = null;
        cItem.onComplete = null;
        cItem.onRepeat = null;
        aItem.onStart = aItem.onStart || noop;
        aItem.onComplete = aItem.onComplete || noop;
        aItem.onStartBack = aItem.onStartBack || noop;
        aItem.onCompleteBack = aItem.onCompleteBack || noop;
        _this.defaultTweenData[i] = cItem;
        _this.defaultData[i] = aItem;
      };
      vars.forEach(varsForIn);
    };

    _this.scrollEventListener = function () {
      var scrollTop = (0, _util.currentScrollTop)();
      _this.clientHeight = (0, _util.windowHeight)();
      var dom = _this.props.location ? document.getElementById(_this.props.location) : _this.dom;
      if (!dom) {
        throw new Error('"location" is null');
      }
      var offsetTop = dom.getBoundingClientRect().top + scrollTop;
      var elementShowHeight = scrollTop - offsetTop + _this.clientHeight;
      var currentShow = _this.scrollTop - offsetTop + _this.clientHeight;
      _this.defaultData.forEach(function (item) {
        if (elementShowHeight <= item.delay) {
          if (!_this.onCompleteBackBool && _this.onStartBool) {
            _this.onCompleteBackBool = true;
            item.onCompleteBack();
          }
        } else {
          _this.onCompleteBackBool = false;
        }
        if (elementShowHeight >= item.delay) {
          if (!_this.onStartBool) {
            _this.onStartBool = true;
            item.onStart();
          }
        } else {
          _this.onStartBool = false;
        }

        if (elementShowHeight <= item.delay + item.duration) {
          if (!_this.onStartBackBool && _this.onCompleteBool) {
            _this.onStartBackBool = true;
            item.onStartBack();
          }
        } else {
          _this.onStartBackBool = false;
        }

        if (elementShowHeight >= item.delay + item.duration) {
          if (!_this.onCompleteBool) {
            _this.onCompleteBool = true;
            item.onComplete();
          }
        } else {
          _this.onCompleteBool = false;
        }
      });
      _ticker2["default"].clear(_this.tickerId);
      _this.tickerId = 'scrollParallax' + Date.now() + '-' + tickerId;
      tickerId++;
      if (tickerId >= Number.MAX_VALUE) {
        tickerId = 0;
      }
      var startFrame = _ticker2["default"].frame;
      _ticker2["default"].wake(_this.tickerId, function () {
        var moment = (_ticker2["default"].frame - startFrame) * _ticker2["default"].perFrame;
        var ratio = _tweenFunctions2["default"].easeOutQuad(moment, 0.08, 1, 300);
        _this.timeline.frame(currentShow + ratio * (elementShowHeight - currentShow));
        if (moment >= 300) {
          _ticker2["default"].clear(_this.tickerId);
        }
      });

      _this.scrollTop = scrollTop;
      // 如果不一直靠滚动来执行动画，always=false而且动画全执行完了，，删除scrollEvent;
      if (_this.defaultData.every(function (c) {
        return c.onComplete.only;
      }) && !_this.props.always) {
        _EventDispatcher2["default"].removeEventListener(_this.eventType, _this.scrollEventListener);
      }
    };

    _this.scrollTop = 0;
    _this.defaultTweenData = [];
    _this.defaultData = [];
    _this.timeout = null;
    _this.state = {};
    return _this;
  }

  ScrollParallax.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.dom = _reactDom2["default"].findDOMNode(this);
    this.scrollTop = (0, _util.currentScrollTop)();
    this.clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    this.setDefaultData(this.props.animation || {});

    // 第一次进入;
    this.timeout = setTimeout(function () {
      _this2.timeline = new _TimeLine2["default"](_this2.dom, _this2.defaultTweenData);
      // 预注册;
      _this2.timeline.frame(0);
      _this2.scrollEventListener();
      var date = Date.now();
      var length = _EventDispatcher2["default"]._listeners.scroll ? _EventDispatcher2["default"]._listeners.scroll.length : 0;
      _this2.eventType = 'scroll.scrollEvent' + date + length;
      _EventDispatcher2["default"].addEventListener(_this2.eventType, _this2.scrollEventListener);
    });
  };

  ScrollParallax.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var equal = (0, _util.objectEqual)(this.props.animation, nextProps.animation);
    if (!equal) {
      this.setDefaultData(nextProps.animation || {});
      this.timeline.resetAnimData();
      this.timeline.setDefaultData(this.defaultTweenData);
    }
  };

  ScrollParallax.prototype.componentWillUnmount = function componentWillUnmount() {
    if (!this.eventType && this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = null;
    } else {
      _EventDispatcher2["default"].removeEventListener(this.eventType, this.scrollEventListener);
    }
  };

  ScrollParallax.prototype.render = function render() {
    var props = _extends({}, this.props);
    ['animation', 'always', 'component', 'location', 'id'].forEach(function (key) {
      return delete props[key];
    });
    var style = _extends({}, props.style);
    for (var p in style) {
      if (p.indexOf('filter') >= 0 || p.indexOf('Filter') >= 0) {
        // ['Webkit', 'Moz', 'Ms', 'ms'].forEach(prefix=> style[`${prefix}Filter`] = style[p]);
        var transformArr = ['Webkit', 'Moz', 'Ms', 'ms'];
        for (var i = 0; i < transformArr.length; i++) {
          style[transformArr[i] + 'Filter'] = style[p];
        }
      }
    }
    props.style = style;
    return _react2["default"].createElement(this.props.component, props);
  };

  return ScrollParallax;
}(_react2["default"].Component);

ScrollParallax.propTypes = {
  component: _react2["default"].PropTypes.string,
  animation: _react2["default"].PropTypes.any,
  always: _react2["default"].PropTypes.bool,
  location: _react2["default"].PropTypes.string,
  children: _react2["default"].PropTypes.any,
  className: _react2["default"].PropTypes.string,
  style: _react2["default"].PropTypes.any,
  id: _react2["default"].PropTypes.string
};

ScrollParallax.defaultProps = {
  component: 'div',
  always: true
};

exports["default"] = ScrollParallax;
module.exports = exports['default'];